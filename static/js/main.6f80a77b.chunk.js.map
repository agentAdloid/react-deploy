{"version":3,"sources":["hoc/Aux.js","UI/Button.js","components/Xray/Xray.js","Assets/Images/img2.png","Assets/Images/img12.png","components/XrayConfigurator.js","App.js","reportWebVitals.js","index.js"],"names":["aux","props","children","button","className","onClick","clicked","XRay","componentDidMount","updateWidthHeight","window","addEventListener","getDiameter","state","diameter","resize","getMaxResWidth","getMaxResize","newDiameter","matchesWindow","responsive","matchMedia","matches","beyond","naturalWidth","firstImg","naturalHeight","percent","centerX","centerY","sensor","width","clientWidth","height","Math","round","dim","top","left","console","log","setState","screen","i","length","HoverSensor","event","positionX","layerX","positionY","layerY","zoomPosition","position","coefficient","zoom","style","lastImg","move","transform","onLeftPress","onRightPress","onTopPress","onBottomPress","images","cursor","type","bind","this","parentClass","parentTransform","lastImage","lastStyle","Aux","ref","img","src","alt","Component","XrayConfigurator","img1","img2","backgroundColor","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6f80a77b.chunk.js","sourcesContent":["const aux = (props) => props.children;\n\nexport default aux;","import React from 'react';\n\nimport './Button.css';\n\nconst button = (props) => (\n    <div className=\"Button\">\n    <button\n        onClick={props.clicked}>{props.children}</button>\n    </div>\n);\n\nexport default button;","\nimport React, {Component} from 'react';\nimport './Xray.css';\nimport Aux from '../../hoc/Aux';\nimport Button from '../../UI/Button';\nexport default class XRay extends Component{\n    constructor(props){\n        super(props);\n        //console.log('hi');\n        //console.log('bi');\n        this.state = {\n            transform: true,\n            images: this.props.images,\n            cursor: this.props.cursor || false,\n            diameter: this.props.diameter || 150,\n            beyond: this.props.beyond || false,\n            width: null,\n            height: null,\n            dim: null,\n            type: this.props.type || 'circle',\n            sensor: {\n                width: null,\n                height: null,\n                top: null,\n                left: null\n            },\n            responsive: this.props.responsive || false,\n            resize: this.props.resize || [\n                {\n                    screen: 1199,\n                    diameter: 130\n                },\n                {\n                    screen: 991,\n                    diameter: 100\n                },\n                {\n                    screen: 767,\n                    diameter: 80\n                },\n                {\n                    screen: 575,\n                    diameter: 50\n                }\n            ],\n            centerX: 0 ,\n            centerY: 0\n        };\n        this.move = this.move.bind(this);\n    }\n\n    componentDidMount = () =>{\n        this.updateWidthHeight();\n        window.addEventListener('resize', this.updateWidthHeight);\n    };\n\n    /**\n     * get diameter\n     * @returns {*}\n     */\n\n    getDiameter = () => {\n        let {diameter, resize} = this.state;\n        let getMaxResWidth = this.getMaxResize(resize);\n        let newDiameter = this.matchesWindow(resize);\n        if(this.state.responsive){\n            if(window.matchMedia(`(min-width: ${getMaxResWidth + 1}px)`).matches){\n                return (newDiameter > diameter)?(newDiameter):(diameter);\n            }else{\n                return newDiameter;\n            }\n        }else{\n            return diameter;\n        }\n    };\n\n    /**\n     * update width and height\n     */\n\n    updateWidthHeight = () => {\n        let {beyond} = this.state;\n        let naturalWidth = this.firstImg.naturalWidth;\n        let naturalHeight = this.firstImg.naturalHeight;\n        let percent = naturalWidth / naturalHeight;\n        if(naturalHeight===0)\n            percent = 1.61;\n        let width = this.firstImg.clientWidth;\n        let height = Math.round((width / percent));\n        let dim = this.getDiameter();\n        //console.log(window.screen.width);\n        let centerX = 0;\n        let centerY = 0;\n        let sensor;\n        if(beyond){\n            sensor = {\n                width: width + dim,\n                height: height + dim,\n                top: -(dim / 2),\n                left: -(dim / 2)\n            }\n        }else{\n            sensor = {\n                width: width,\n                height: height,\n                top: 0,\n                left: 0\n            }\n        }\n        centerY = Math.round(height/2)+Math.round(dim/2);\n        centerX = Math.round(width/2)+Math.round(dim/2);\n        console.log(centerX + \" cc \" + centerY + percent);\n        // console.log(width + ' ' + height + ' ' + dim);\n        this.setState({\n            width,\n            height,\n            dim,\n            sensor,\n            centerX,\n            centerY\n        });\n    };\n\n    /**\n     * get max width for diameter\n     * @param diameter\n     * @returns {number|Screen}\n     */\n\n    getMaxResize = (diameter) => {\n        let newDiameter = diameter[0].screen;\n        for(let i = 0; i < diameter.length; i++){\n            if(diameter[i].screen > newDiameter){\n                newDiameter = diameter[i].screen;\n            }\n        }\n        return newDiameter;\n    };\n\n    /**\n     * @param diameter\n     * @returns {number|Screen}\n     */\n\n    matchesWindow = (diameter) => {\n        let newDiameter = diameter[0].diameter;\n        for(let i = 0; i < diameter.length; i++){\n            if(window.matchMedia(`(max-width: ${diameter[i].screen}px)`).matches){\n                newDiameter = diameter[i].diameter;\n            }\n        }\n        return newDiameter;\n    };\n\n    /**\n     * hover sensor get position zoom and photo\n     * @param event\n     */\n\n    HoverSensor = (event) => {\n\n        let positionX = event.layerX ;\n        let positionY = event.layerY ;\n        console.log(\"x\" + event.layerX);\n        console.log(\"y\" + event.layerY);\n        let {sensor, dim, beyond} = this.state;\n\n        let position = {\n            startY: 0,\n            endY: sensor.height,\n            startX: 0,\n            endX: sensor.width\n        };\n\n        let coefficient = dim / 2;\n\n        let zoomPosition;\n\n        if(beyond){\n            zoomPosition = dim / 2;\n        }else{\n            zoomPosition = 0;\n        }\n\n        if((positionY >= position.startY + coefficient) && (positionY <= position.endY - coefficient)){\n            this.zoom.style.top = `${positionY - coefficient - zoomPosition}px`;\n            this.lastImg.style.top = `${-positionY + coefficient + zoomPosition}px`;\n        }else if(positionY < position.startY + coefficient){\n            this.zoom.style.top = `${position.startY - zoomPosition}px`;\n            this.lastImg.style.top = `${position.startY + zoomPosition}px`;\n        }else if(positionY > position.endY - coefficient){\n            this.zoom.style.top = `${position.endY - dim - zoomPosition}px`;\n            this.lastImg.style.top = `${-position.endY + dim + zoomPosition}px`;\n        }\n\n        if((positionX >= position.startX + coefficient) && (positionX <= position.endX - coefficient)){\n            this.zoom.style.left = `${positionX - coefficient - zoomPosition}px`;\n            this.lastImg.style.left = `${-positionX + coefficient + zoomPosition}px`;\n        }else if(positionX < position.startX + coefficient){\n            this.zoom.style.left = `${position.startX - zoomPosition}px`;\n            this.lastImg.style.left = `${position.startX + zoomPosition}px`;\n        }else if(positionX > position.endX - coefficient){\n            this.zoom.style.left = `${position.endX - dim - zoomPosition}px`;\n            this.lastImg.style.left = `${-position.endX +  dim + zoomPosition}px`;\n        }\n        this.setState({centerX:event.layerX,centerY:event.layerY});\n       // console.log(this.zoom.style.left + ' xx  ' + positionX + ' endxx' + position.endX);\n        //console.log(this.zoom.style.top + ' yy ' + positionY + 'endyy' + position.endY);\n    };\n\n    /**\n     * move mouse\n     * @param event\n     */\n\n    move = (event) => {\n        let {transform} = this.state;\n        if(transform){\n            this.setState({\n                transform: false\n            });\n        }\n\n        this.HoverSensor(event);\n    };\n    onLeftPress = () =>{\n        if(this.state.centerX-Math.round(this.state.dim/2)<=0)\n        {   return ;\n        }\n        this.move({\n            layerX:this.state.centerX-10,\n            layerY:this.state.centerY\n            });\n    }\n    onRightPress = () =>{\n        if(this.state.centerX >=Math.round(this.state.width)+Math.round(this.state.dim/2))\n        {   return ;\n        }\n        this.move({\n            layerX:this.state.centerX+10,\n            layerY:this.state.centerY\n            });\n    }\n    onTopPress = () =>{\n        if(this.state.centerY-Math.round(this.state.dim/2)<=0)\n        {   return ;\n        }\n        this.move({\n            layerX:this.state.centerX,\n            layerY:this.state.centerY-10\n            });\n    }\n    onBottomPress = () =>{\n        if(this.state.centerY >=Math.round(this.state.height)+Math.round(this.state.dim/2))\n        {   return ;\n        }\n        this.move({\n            layerX:this.state.centerX,\n            layerY:this.state.centerY+10\n                    });\n    }\n    render(){\n        let {\n            images,\n            cursor,\n            transform,\n            width,\n            height,\n            dim,\n            sensor,\n            type\n        } = this.state;\n        let parentClass = (cursor)?('x-ray-photo-parent'):('x-ray-photo-parent cursor-none');\n        let parentTransform = (transform)?('x-ray-last-photo transform'):('x-ray-last-photo');\n        let lastImage = (transform)?('x-ray-last-photo-img transform'):('x-ray-last-photo-img');\n        let lastStyle = {\n            width: `${dim}px`,\n            height: `${dim}px`\n        };\n        return(\n            <Aux>\n            <div className={parentClass}>\n                <img\n                    ref={(img)=>{\n                        this.firstImg = img;\n                        if(img!=null)\n                        {   console.log(img.naturalHeight + \", \" + img.naturalWidth + ',' +img.width);\n                            console.log('firstImg is accesable');\n                        }\n                        //console.log(\"image1\");\n                        //if(img!=null)\n                        // {console.log(this.firstImg.style.top);\n                        // console.log(this.firstImg.style.left);\n                        //}\n                    }}\n                    src={images[0]}\n                    alt=\"first-photo\"\n                    className=\"x-ray-first-photo\"\n                />\n                <div\n                    ref={(zoom)=>{\n                        this.zoom = zoom;\n                        //console.log(zoom);\n                    }}\n                    className={parentTransform}\n                    style={lastStyle}\n                >\n                    {\n                        (type === 'magnifyingGlass')?(\n                            <div className=\"magnifyingGlass\"></div>\n                        ):(null)\n                    }\n                    <div className=\"x-ray-last-photo-img-parent\">\n                        <img\n                            ref={(img)=>{\n                                this.lastImg = img;\n                                ///console.log(img + \"image2\");\n                            }}\n                            style={{width: `${width}px`, height: `${height}px`}}\n                            src={images[1]}\n                            alt=\"last-photo\"\n                            className={lastImage}\n                        />\n                    </div>\n                </div>\n                {/* <div className=\"x-ray-sensor\" style={sensor} onMouseMove={this.move}></div> */}\n            </div>\n            <div className=\"Buttons\">\n                <Button clicked={this.onLeftPress}>Left</Button>\n                <Button clicked={this.onRightPress}>Right</Button>\n                <Button clicked={this.onBottomPress}>Bottom</Button>\n                <Button clicked={this.onTopPress}>Top</Button>\n            </div>\n            </Aux>\n        );\n    }\n}","export default __webpack_public_path__ + \"static/media/img2.09314abe.png\";","export default __webpack_public_path__ + \"static/media/img12.63d98b4d.png\";","import React, { Component } from \"react\";\nimport XRay from \"./Xray/Xray\";\nimport img1 from \"../Assets/Images/img2.png\";\nimport img2 from \"../Assets/Images/img12.png\";\n\nclass XrayConfigurator extends Component {\n  render() {\n    return (\n      <XRay\n        images={[img1, img2]}\n        beyond={true}\n        diameter={200}\n        cursor={true}\n        responsive={true}\n        type={\"circle\"}\n        backgroundColor={\"#00AAFF\"}\n        resize={[\n          {\n            screen: 1199,\n            diameter: 100,\n          },\n          {\n            screen: 991,\n            diameter: 50,\n          },\n        ]}\n      />\n    );\n  }\n}\n\nexport default XrayConfigurator;\n","import './App.css';\nimport XrayCongigurator from './components/XrayConfigurator';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <XrayCongigurator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}