{"version":3,"sources":["hoc/Aux.js","UI/Button.js","components/Xray/Xray.js","Assets/Images/img11.png","Assets/Images/img12.png","components/XrayConfigurator.js","App.js","reportWebVitals.js","index.js"],"names":["aux","props","children","button","className","onClick","clicked","XRay","componentDidMount","updateWidthHeight","window","addEventListener","getDiameter","state","diameter","resize","getMaxResWidth","getMaxResize","newDiameter","matchesWindow","responsive","matchMedia","matches","beyond","firstImg","setState","centerX","setTimeout","naturalWidth","naturalHeight","percent","centerY","sensor","width","clientWidth","height","Math","round","dim","top","left","screen","i","length","HoverSensor","event","zoomPosition","positionX","nativeEvent","layerX","positionY","layerY","position","coefficient","zoom","style","lastImg","move","reshow","transform","onLeftPress","obj","onRightPress","onTopPress","onBottomPress","images","cursor","type","bind","this","parentClass","parentTransform","lastImage","lastStyle","Aux","ref","img","src","alt","onMouseMove","Component","XrayConfigurator","img1","img2","backgroundColor","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.348253c2.chunk.js","sourcesContent":["const aux = (props) => props.children;\n\nexport default aux;","import React from 'react';\n\nimport './Button.css';\n\nconst button = (props) => (\n    <div className=\"Button\">\n    <button\n        onClick={props.clicked}>{props.children}</button>\n    </div>\n);\n\nexport default button;","import React, { Component } from \"react\";\nimport \"./Xray.css\";\nimport Aux from \"../../hoc/Aux\";\nimport Button from \"../../UI/Button\";\nexport default class XRay extends Component {\n  constructor(props) {\n    super(props);\n    //console.log('hi');\n    //console.log('bi');\n    this.state = {\n      transform: true,\n      images: this.props.images,\n      cursor: this.props.cursor || false,\n      diameter: this.props.diameter || 150,\n      beyond: this.props.beyond || false,\n      width: null,\n      height: null,\n      dim: null,\n      type: this.props.type || \"circle\",\n      sensor: {\n        width: null,\n        height: null,\n        top: null,\n        left: null,\n      },\n      responsive: this.props.responsive || true,\n      resize: this.props.resize || [\n        {\n          screen: 1199,\n          diameter: 250,\n        },\n        {\n          screen: 991,\n          diameter: 150,\n        },\n        {\n          screen: 767,\n          diameter: 120,\n        },\n        {\n          screen: 575,\n          diameter: 70,\n        },\n      ],\n      centerX: 0,\n      centerY: 0,\n      reshow: 1,\n    };\n    this.move = this.move.bind(this);\n  }\n\n  componentDidMount = () => {\n    this.updateWidthHeight();\n    window.addEventListener(\"resize\", this.updateWidthHeight);\n  };\n\n  /**\n   * get diameter\n   * @returns {*}\n   */\n\n  getDiameter = () => {\n    let { diameter, resize } = this.state;\n    let getMaxResWidth = this.getMaxResize(resize);\n    let newDiameter = this.matchesWindow(resize);\n    if (this.state.responsive) {\n      if (window.matchMedia(`(min-width: ${getMaxResWidth + 1}px)`).matches) {\n        return newDiameter > diameter ? newDiameter : diameter;\n      } else {\n        return newDiameter;\n      }\n    } else {\n      return diameter;\n    }\n  };\n\n  /**\n   * update width and height\n   */\n\n  updateWidthHeight = () => {\n    let { beyond } = this.state;\n    if (this.firstImg === null) {\n      this.setState({ centerX: 0 });\n      setTimeout(this.updateWidthHeight, 2000);\n      return ;\n    }\n    let naturalWidth = this.firstImg.naturalWidth;\n    let naturalHeight = this.firstImg.naturalHeight;\n    let percent = naturalWidth / naturalHeight;\n    if (naturalHeight === 0) percent = 1.61;\n    let width = this.firstImg.clientWidth;\n    let height = Math.round(width / percent);\n    let dim = this.getDiameter();\n    //console.log(window.screen.width);\n    let centerX = 0;\n    let centerY = 0;\n    let sensor;\n    if (beyond) {\n      sensor = {\n        width: width + dim,\n        height: height + dim,\n        top: -(dim / 2),\n        left: -(dim / 2),\n      };\n    } else {\n      sensor = {\n        width: width,\n        height: height,\n        top: 0,\n        left: 0,\n      };\n    }\n    centerY = Math.round(height / 2) + Math.round(dim / 2);\n    centerX = Math.round(width / 2) + Math.round(dim / 2);\n    //console.log(centerX + \" cc \" + centerY + percent);\n    // console.log(width + ' ' + height + ' ' + dim);\n    this.setState({\n      width,\n      height,\n      dim,\n      sensor,\n      centerX,\n      centerY,\n    });\n  };\n\n  /**\n   * get max width for diameter\n   * @param diameter\n   * @returns {number|Screen}\n   */\n\n  getMaxResize = (diameter) => {\n    let newDiameter = diameter[0].screen;\n    for (let i = 0; i < diameter.length; i++) {\n      if (diameter[i].screen > newDiameter) {\n        newDiameter = diameter[i].screen;\n      }\n    }\n    return newDiameter;\n  };\n\n  /**\n   * @param diameter\n   * @returns {number|Screen}\n   */\n\n  matchesWindow = (diameter) => {\n    let newDiameter = diameter[0].diameter;\n    for (let i = 0; i < diameter.length; i++) {\n      if (window.matchMedia(`(max-width: ${diameter[i].screen}px)`).matches) {\n        newDiameter = diameter[i].diameter;\n      }\n    }\n    return newDiameter;\n  };\n\n  /**\n   * hover sensor get position zoom and photo\n   * @param event\n   */\n\n  HoverSensor = (event) => {\n    let positionX = event.nativeEvent.layerX;\n    let positionY = event.nativeEvent.layerY;\n    //console.log(\"x\" + event.layerX);\n    //console.log(\"y\" + event.layerY);\n    let { sensor, dim, beyond } = this.state;\n\n    let position = {\n      startY: 0,\n      endY: sensor.height,\n      startX: 0,\n      endX: sensor.width,\n    };\n\n    let coefficient = dim / 2;\n\n    let zoomPosition;\n\n    if (beyond) {\n      zoomPosition = dim / 2;\n    } else {\n      zoomPosition = 0;\n    }\n\n    if (\n      positionY >= position.startY + coefficient &&\n      positionY <= position.endY - coefficient\n    ) {\n      this.zoom.style.top = `${positionY - coefficient - zoomPosition}px`;\n      this.lastImg.style.top = `${-positionY + coefficient + zoomPosition}px`;\n    } else if (positionY < position.startY + coefficient) {\n      this.zoom.style.top = `${position.startY - zoomPosition}px`;\n      this.lastImg.style.top = `${position.startY + zoomPosition}px`;\n    } else if (positionY > position.endY - coefficient) {\n      this.zoom.style.top = `${position.endY - dim - zoomPosition}px`;\n      this.lastImg.style.top = `${-position.endY + dim + zoomPosition}px`;\n    }\n\n    if (\n      positionX >= position.startX + coefficient &&\n      positionX <= position.endX - coefficient\n    ) {\n      this.zoom.style.left = `${positionX - coefficient - zoomPosition}px`;\n      this.lastImg.style.left = `${-positionX + coefficient + zoomPosition}px`;\n    } else if (positionX < position.startX + coefficient) {\n      this.zoom.style.left = `${position.startX - zoomPosition}px`;\n      this.lastImg.style.left = `${position.startX + zoomPosition}px`;\n    } else if (positionX > position.endX - coefficient) {\n      this.zoom.style.left = `${position.endX - dim - zoomPosition}px`;\n      this.lastImg.style.left = `${-position.endX + dim + zoomPosition}px`;\n    }\n    // console.log(this.zoom.style.left + ' xx  ' + positionX + ' endxx' + position.endX);\n    //console.log(this.zoom.style.top + ' yy ' + positionY + 'endyy' + position.endY);\n  };\n\n  /**\n   * move mouse\n   * @param event\n   */\n\n  move = (event) => {\n    if (this.state.reshow === 1) {\n      this.setState({ reshow: 0 });\n      this.updateWidthHeight();\n    }\n    let { transform } = this.state;\n    if (transform) {\n      this.setState({\n        transform: false,\n      });\n    }\n\n    this.HoverSensor(event);\n  };\n  onLeftPress = () => {\n    const obj = {\n      nativeEvent: {\n        layerX: this.state.centerX - this.state.width * 0.3,\n        layerY: this.state.centerY,\n      },\n    };\n    this.move(obj);\n  };\n  onRightPress = () => {\n    const obj = {\n      nativeEvent: {\n        layerX: this.state.centerX - this.state.width * 0.25,\n        layerY: this.state.centerY + this.state.height * 0.3,\n      },\n    };\n    this.move(obj);\n  };\n  onTopPress = () => {\n    const obj = {\n      nativeEvent: {\n        layerX: this.state.centerX + this.state.width * 0.4,\n        layerY: this.state.centerY + this.state.height * 0.15,\n      },\n    };\n    this.move(obj);\n  };\n  onBottomPress = () => {\n    const obj = {\n      nativeEvent: {\n        layerX: this.state.centerX + this.state.width * 0.3,\n        layerY: this.state.centerY + this.state.height * 0.27,\n      },\n    };\n    this.move(obj);\n  };\n  render() {\n    let { images, cursor, transform, width, height, dim, sensor, type } =\n      this.state;\n    let parentClass = cursor\n      ? \"x-ray-photo-parent\"\n      : \"x-ray-photo-parent cursor-none\";\n    let parentTransform = transform\n      ? \"x-ray-last-photo transform\"\n      : \"x-ray-last-photo\";\n    let lastImage = transform\n      ? \"x-ray-last-photo-img transform\"\n      : \"x-ray-last-photo-img\";\n    let lastStyle = {\n      width: `${dim}px`,\n      height: `${dim}px`,\n    };\n    //console.log(\"hi\");\n    return (\n      <Aux>\n        <div className={parentClass}>\n          <img\n            ref={(img) => {\n              this.firstImg = img;\n              //console.log(\"image1\");\n              //if(img!=null)\n              // {console.log(this.firstImg.style.top);\n              // console.log(this.firstImg.style.left);\n              //}\n            }}\n            src={images[0]}\n            alt=\"first-photo\"\n            className=\"x-ray-first-photo\"\n          />\n          <div\n            ref={(zoom) => {\n              this.zoom = zoom;\n              //console.log(zoom);\n            }}\n            className={parentTransform}\n            style={lastStyle}\n          >\n            {type === \"magnifyingGlass\" ? (\n              <div className=\"magnifyingGlass\"></div>\n            ) : null}\n            <div className=\"x-ray-last-photo-img-parent\">\n              <img\n                ref={(img) => {\n                  this.lastImg = img;\n                  ///console.log(img + \"image2\");\n                }}\n                style={{ width: `${width}px`, height: `${height}px` }}\n                src={images[1]}\n                alt=\"last-photo\"\n                className={lastImage}\n              />\n            </div>\n          </div>\n          <div\n            className=\"x-ray-sensor\"\n            style={sensor}\n            onMouseMove={this.move}\n          ></div>\n        </div>\n        <div className=\"Buttons\">\n          <Button clicked={this.onLeftPress}>Top rear</Button>\n          <Button clicked={this.onRightPress}>Rear wheels</Button>\n          <Button clicked={this.onBottomPress}>Front Wheels</Button>\n          <Button clicked={this.onTopPress}>Headlights</Button>\n        </div>\n      </Aux>\n    );\n  }\n}\n","export default __webpack_public_path__ + \"static/media/img11.6addca63.png\";","export default __webpack_public_path__ + \"static/media/img12.ae8f99fa.png\";","import React, { Component } from \"react\";\nimport XRay from \"./Xray/Xray\";\nimport img1 from \"../Assets/Images/img11.png\";\nimport img2 from \"../Assets/Images/img12.png\";\n\nclass XrayConfigurator extends Component {\n  render() {\n    return (\n      <XRay\n        images={[img1, img2]}\n        beyond={true}\n        diameter={200}\n        cursor={true}\n        responsive={true}\n        type={\"circle\"}\n        backgroundColor={\"#00AAFF\"}\n      />\n    );\n  }\n}\n\nexport default XrayConfigurator;\n","import './App.css';\nimport XrayCongigurator from './components/XrayConfigurator';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <XrayCongigurator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}